mods_out <- c(mods$coefficients[, 'Estimate'], r.squared = mods$r.squared)
mods <- summary(sz.eDNA_seine_comp.nested$model)
mods_out <- c(mods[coefficients[, 'Estimate']], r.squared = mods[r.squared])
mods_out <- c(mods[coefficients], r.squared = mods[r.squared])
mods_out <- c(coeffs=mods[coefficients], r.squared = mods[r.squared])
regressions %>% tidy(mods)
mods %>% tidy(mods)
mods %>% skim(mods)
install.packages("skimr")
library(skimr)
mods %>% skim(mods)
mods %>% all_of(mods)
mods %>% glance(mods)
sz.eDNA_seine_comp %>%
group_by(Species) %>%
do(glance(lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)))
sz.eDNA_seine_comp %>%
group_by(Species) %>%
models_out <- do(glance(lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)))
sz.eDNA_seine_comp %>%
group_by(Species) %>%
models_out = do(glance(lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)))
sz.eDNA_seine_comp %>%
group_by(Species) %>%
do(glance(lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)))
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
do(glance(lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)))
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
do(glance(mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) -> sz.eDNA_seine_comp.nested
))
do(glance(sz.eDNA_seine_comp.nested))
do(glimpse(sz.eDNA_seine_comp.nested))
do(glimpse(sz.eDNA_seine_comp.unnested))
do(glimpse(sz.eDNA_seine_comp.unnested$model))
glimpse(sz.eDNA_seine_comp.unnested$model)
get_rsq <- function(sz.eDNA_seine_comp.nested) glance(sz.eDNA_seine_comp.nested)$r.square
View(get_rsq)
get_rsq <- function(sz.eDNA_seine_comp.nested) glance(sz.eDNA_seine_comp.nested)$r.squared
get_rsq <- function(mod) glance(mod)$r.squared
r2_vals <- r2_vals %>%
mutate(r.squared = map_dbl(sz.eDNA_seine_comp.nested, get_rsq))
sz.eDNA_seine_comp.nested <- sz.eDNA_seine_comp.nested %>%
mutate(r.squared = map_dbl(sz.eDNA_seine_comp.nested, get_rsq))
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
fit_model <- function(df) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
fit_model <- function(data) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
fit_model <- function(df) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
nested$model[[1]]
get_rsq <- function(mod) glance(mod)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
nested
get_rsq <- function(mod) glance(model)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
get_rsq <- function(mod) glance(model)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(mod, get_rsq))
get_rsq <- function(mod) glance(mod)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
nested
fit_model <- function(data) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
fit_model <- function(data) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
nested$model[[1]]
get_rsq <- function(mod) glance(mod)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
nested
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
nested$data[[1]]
library(purrr)
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
nested$data[[1]]
fit_model <- function(data) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
nested$model[[1]]
get_rsq <- function(mod) glance(mod)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
nested
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
nested$data[[1]]
fit_model <- function(data) lm(e_index ~ mean_seine_count, data = df)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
nested$data[[1]]
fit_model <- function(df) lm(e_index ~ mean_seine_count, data = df)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
nested$model[[1]]
get_rsq <- function(mod) glance(mod)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
nested
View(nested)
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) -> sz.eDNA_seine_comp.nested
View(sz.eDNA_seine_comp.nested)
View(sz.eDNA_seine_comp.nested[[3]][[1]])
View(nested)
View(sz.eDNA_seine_comp.nested)
View(nested)
get_coeffs <- function(mod) glance(mod)$coefficients
nested <- nested %>%
mutate(coefficients = map_dbl(model, get_coeffs))
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) %>%
coef %>%
as.list %>%
as_tibble)) %>%
unnest(model) %>%
unnest(data)
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)))<-model %>%
coef %>%
as.list %>%
as_tibble)) %>%
unnest(model) %>%
unnest(data)
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) %>%
coef %>%
as.list %>%
as_tibble)) %>%
unnest(model) %>%
unnest(data)
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp)))%>%
tidy)) %>%
unnest(model) %>%
filter(term == 'x')
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) ->model %>%
tidy)) %>%
unnest(model) %>%
filter(term == 'x')
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) -> sz.eDNA_seine_comp.nested
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) -> model %>%
tidy)) %>%
unnest(sz.eDNA_seine_comp.nested) %>%
filter(term == 'x')
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) -> model %>%
tidy)) %>%
sz.eDNA_seine_comp.unnested <- sz.eDNA_seine_comp.nested %>%
unnest(data) %>%
filter(term == 'x')
sz.eDNA_seine_comp <- read.csv(file = "sz.eDNA_seine_comp.csv", header = T, sep = ',')
sz.eDNA_seine_comp %>%
group_by(Species) %>%
nest() %>%
mutate(
model = map(data, function(sz.eDNA_seine_comp) lm(e_index ~ mean_seine_count, data = sz.eDNA_seine_comp))) -> sz.eDNA_seine_comp.nested
glimpse(sz.eDNA_seine_comp.unnested$model)
sz.eDNA_seine_comp.unnested <- sz.eDNA_seine_comp.nested %>%
unnest(data) #%>% unnest(model)
View(sz.eDNA_seine_comp.unnested)
source('C:/Users/kylee/Downloads/eDNA_r2.R')
source('C:/Users/kylee/Downloads/eDNA_r2.R')
source('C:/Users/kylee/Downloads/eDNA_r2.R')
## New
get_rsq <- function(mod) glance(mod)$r.squared
sz.eDNA_seine_comp.nested <- sz.eDNA_seine_comp.nested %>%
mutate(r.squared = map_dbl(sz.eDNA_seine_comp.nested, get_rsq))
r2_vals
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
nested$data[[1]]
fit_model <- function(df) lm(e_index ~ mean_seine_count, data = df)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
nested$model[[1]]
get_rsq <- function(mod) glance(mod)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
nested
View(nested)
nested$model
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
nested$data[[1]]
fit_model <- function(df) lm(e_index ~ mean_seine_count, data = df)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
nested$model[[1]]
get_rsq <- function(mod) glance(mod)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
nested
nested$model
nested$model[coefficients]
nested$model[,coefficients]
model_coef_nested <- nested %>%
mutate(coef = map(model, ~_(.x)))
model_coef_nested <- nested %>%
mutate(coef = map(model, ~(.x)))
View(model_coef_nested)
model_coef <- model_coef_nested %>%
unnest()
model_coef <- model_coef_nested %>%
unnest(model_coef_nested)
model_coef <- model_coef_nested %>%
unnest(all_of(model_coef_nested))
model_coef <- model_coef_nested %>%
unnest(all_of(model_coef_nested$coef))
model_coef <- model_coef_nested %>%
unnest(model_coef_nested$coef)
model_coef_nested <- nested %>%
mutate(coef = map(model, ~tidy(.x)))
View(model_coef_nested)
View(model_coef_nested[[5]][[1]])
model_coef <- model_coef_nested %>%
unnest(coef)
View(model_coef)
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
## Original
sz.eDNA_seine_comp <- read.csv(file = "sz.eDNA_seine_comp.csv", header = T, sep = ',')
nested <- group_by(sz.eDNA_seine_comp, Species) %>% nest()
nested
nested$data[[1]]
fit_model <- function(df) lm(e_index ~ mean_seine_count, data = df)
nested <- nested %>%
mutate(model = map(data, fit_model))
nested
nested$model[[1]]
get_rsq <- function(mod) glance(mod)$r.squared
nested <- nested %>%
mutate(r.squared = map_dbl(model, get_rsq))
nested
model_coef_nested <- nested %>%
mutate(coef = map(model, ~tidy(.x)))
model_coef <- model_coef_nested %>%
unnest(coef)
model_coef
write.csv(model_coef, file="model_stats.csv")
View(model_coef)
drop.cols <- c('data', 'model')
model_coef %>% select(-one_of(drop.cols))
model_coef %>% select(model_coef,-one_of(drop.cols))
model_coef %>% select(-c('data', 'model'))
model_coef <- model_coef %>%
select(-c('data', 'model'))
write.csv(model_coef, file="model_stats.csv")
unlist(model_coef$model)
model_coef <- unlist(model_coef$model)
View(model_coef)
model_coef <- remove(model_coef$model)
model_coef_nested <- nested %>%
mutate(coef = map(model, ~tidy(.x)))
model_coef <- model_coef_nested %>%
unnest(coef)
model_coef
model_coef$model=NULL
View(model_coef)
model_coef$data=NULL
View(model_coef)
write.csv(model_coef, file="model_stats.csv")
setwd("G:/Shared drives/eDNA 2017&2018/2018_analysis/analysis")
knitr::opts_chunk$set(echo = TRUE)
library(ggpmisc)
library(phyloseq)
library(metagMisc)
library(wesanderson)
library(tidyverse)
library(vegan)
library(iNEXT)
library(multcomp)
library(multcompView)
library(treemapify)
library(brew)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(VennDiagram)
library(here)
library(skimr)
library(broom)
setwd(here())
#ColorLoading
wes_palette("GrandBudapest1", n=4) -> col_gbp1
wes_palette("GrandBudapest2", n=4) -> col_gbp2
wes_palette("Darjeeling1", n=5) -> col_dar1
wes_palette("Darjeeling2", n=5) -> col_dar2
wes_palette("Moonrise3", n=5) ->col_moo3
wes_palette("Zissou1", n=5) ->col_zis1
#eDNA
col_dar2[4]
#Seine and eDNA
col_dar1[2]
#Seine
col_zis1[3]
#Visual
col_dar1[4]
#BRUV
col_gbp2[1]
#BRUV and eDNA
col_gbp2[4]
#regression
col_dar2[4]
#all
"coral4"
#Colors by Region (aka Location)
col_loc <- c(col_dar1[1],col_dar1[2],col_dar1[3],col_dar1[4],col_dar1[5],col_gbp2[1], col_gbp2[2], col_gbp2[4])
col_loc
#Colors by Method Seine, eDNA, bruv
col_meth <- c(col_zis1[3],col_moo3[1],col_gbp1[2])
#Load Data
ASV.nested <-  readRDS(file=here("decontam","ASV.nested_final.RDS"))
setwd("G:/Shared drives/eDNA 2017&2018/2018_analysis")
#Load Data
ASV.nested <-  readRDS(file=here("decontam","ASV.nested_final.RDS"))
setwd("G:/Shared drives/eDNA 2017&2018/2018_analysis/analysis")
#Load Data
ASV.nested <-  readRDS(file=here("decontam","ASV.nested_final.RDS"))
setwd("G:/Shared drives/eDNA 2017&2018/2018_analysis/analysis/decontam")
#Load Data
ASV.nested <-  readRDS(file=here("decontam","ASV.nested_final.RDS"))
#Load Data
ASV.nested <-  readRDS(file=here("decontam","ASV.nested_final.RDS"))
setwd("G:/Shared drives/eDNA 2017&2018/2018_analysis/analysis/data")
#Load Data
ASV.nested <-  readRDS(file=here("decontam","ASV.nested_final.RDS"))
#Metadata
input_meta_path_derep <- here("data","metadata_ucsb_2018_050520_dereplicated.csv")
setwd("G:/Shared drives/eDNA 2017&2018/2018_analysis/analysis/decontam")
#Load Data
ASV.nested <-  readRDS(file=here("decontam","ASV.nested_final.RDS"))
ASV.table_used <- readRDS(file=here("decontam","ASV.table_used.RDS"))
library(vegan)
library(tidyverse)
library(phyloseq)
library(wesanderson)
wes_palette("GrandBudapest1", n=4) -> col_gbp1
wes_palette("Moonrise3", n=5) ->col_moo3
wes_palette("Zissou1", n=5) ->col_zis1
sz.mmethod.rel_abun <- read.csv("sz.mmethod.rel_abun.csv", header = T, sep = ',')
sz.mmethod.sampledf <- read.csv("sz.mmethod.sampledf.csv", header = T, sep = ',')
sz.vare.cap_species_distances <- read.csv("sz.vare.cap_species_distances.csv", header = T, sep = ',')
sz.mmethod.rel_abun_f <- sz.mmethod.rel_abun[,-1]
rownames(sz.mmethod.rel_abun_f) <- sz.mmethod.rel_abun[,1]
#Run CAP analysis to identify predictor species
sz.vare.cap <- capscale(sz.mmethod.rel_abun_f ~ Method + Site, data=sz.mmethod.sampledf, dist="bray")
#Retain species scores
sppscores(sz.vare.cap) <- sz.mmethod.rel_abun_f
as.data.frame(vegan::scores(sz.vare.cap, display="species")) %>%
rownames_to_column(var = "sample") %>%
as.tibble %>%
mutate(dist = sqrt((CAP1 - 0)^2 + (CAP2 - 0)^2)) -> sz.vare.cap_species_distances
sz.species_distances <- as.data.frame(sz.vare.cap_species_distances)
rownames(sz.species_distances) <- sz.species_distances$sample
# Now add the environmental variables as arrows
sz.arrowmat <- sz.species_distances
#Rename row names to clean up plot
rownames(sz.species_distances) %>% as.data.frame() -> sz.namers
colnames(sz.namers) <- c("path")
sz.namers %>% separate(path, c("D1","P1","C1","O1","F1","G1","Species"), sep=";") %>% replace(is.na(.), "") %>%
mutate(., name = ifelse(Species == "", G1, Species)) %>%
mutate(., name = ifelse(name == "", F1, name)) %>%
mutate(., name = ifelse(name == "", O1, name)) %>%
mutate(., name = ifelse(name == "", C1, name)) %>%
mutate(., name = ifelse(name == "", P1, name))-> sz.namers
rownames(sz.arrowmat) <- sz.namers$name
library(vegan)
library(tidyverse)
library(phyloseq)
library(wesanderson)
wes_palette("GrandBudapest1", n=4) -> col_gbp1
wes_palette("Moonrise3", n=5) ->col_moo3
wes_palette("Zissou1", n=5) ->col_zis1
sz.mmethod.rel_abun <- read.csv("sz.mmethod.rel_abun.csv", header = T, sep = ',',row.names=NULL)
sz.mmethod.sampledf <- read.csv("sz.mmethod.sampledf.csv", header = T, sep = ',',row.names=NULL)
sz.vare.cap_species_distances <- read.csv("sz.vare.cap_species_distances.csv", header = T, sep = ',',row.names=NULL)
sz.mmethod.rel_abun_f <- sz.mmethod.rel_abun[,-1]
rownames(sz.mmethod.rel_abun_f) <- sz.mmethod.rel_abun[,1]
#Run CAP analysis to identify predictor species
sz.vare.cap <- capscale(sz.mmethod.rel_abun_f ~ Method + Site, data=sz.mmethod.sampledf, dist="bray")
#Retain species scores
sppscores(sz.vare.cap) <- sz.mmethod.rel_abun_f
as.data.frame(vegan::scores(sz.vare.cap, display="species")) %>%
rownames_to_column(var = "sample") %>%
as.tibble %>%
mutate(dist = sqrt((CAP1 - 0)^2 + (CAP2 - 0)^2)) -> sz.vare.cap_species_distances
sz.species_distances <- as.data.frame(sz.vare.cap_species_distances)
rownames(sz.species_distances) <- sz.species_distances$sample
# Now add the environmental variables as arrows
sz.arrowmat <- sz.species_distances
#Rename row names to clean up plot
rownames(sz.species_distances) %>% as.data.frame() -> sz.namers
colnames(sz.namers) <- c("path")
sz.namers %>% separate(path, c("D1","P1","C1","O1","F1","G1","Species"), sep=";") %>% replace(is.na(.), "") %>%
mutate(., name = ifelse(Species == "", G1, Species)) %>%
mutate(., name = ifelse(name == "", F1, name)) %>%
mutate(., name = ifelse(name == "", O1, name)) %>%
mutate(., name = ifelse(name == "", C1, name)) %>%
mutate(., name = ifelse(name == "", P1, name))-> sz.namers
rownames(sz.arrowmat) <- sz.namers$name
library(vegan)
library(tidyverse)
library(phyloseq)
library(wesanderson)
wes_palette("GrandBudapest1", n=4) -> col_gbp1
wes_palette("Moonrise3", n=5) ->col_moo3
wes_palette("Zissou1", n=5) ->col_zis1
sz.mmethod.rel_abun <- read.csv("sz.mmethod.rel_abun.csv", header = T, sep = ',',row.names=NULL)
sz.mmethod.sampledf <- read.csv("sz.mmethod.sampledf.csv", header = T, sep = ',',row.names=NULL)
sz.vare.cap_species_distances <- read.csv("sz.vare.cap_species_distances.csv", header = T, sep = ',',row.names=NULL)
sz.mmethod.rel_abun_f <- sz.mmethod.rel_abun[,-1]
rownames(sz.mmethod.rel_abun_f) <- sz.mmethod.rel_abun[,1]
#Run CAP analysis to identify predictor species
sz.vare.cap <- capscale(sz.mmethod.rel_abun_f ~ Method + Site, data=sz.mmethod.sampledf, dist="bray")
#Retain species scores
sppscores(sz.vare.cap) <- sz.mmethod.rel_abun_f
as.data.frame(vegan::scores(sz.vare.cap, display="species")) %>%
rownames_to_column(var = "sample") %>%
as.tibble %>%
mutate(dist = sqrt((CAP1 - 0)^2 + (CAP2 - 0)^2)) -> sz.vare.cap_species_distances
library(vegan)
library(tidyverse)
library(phyloseq)
library(wesanderson)
wes_palette("GrandBudapest1", n=4) -> col_gbp1
wes_palette("Moonrise3", n=5) ->col_moo3
wes_palette("Zissou1", n=5) ->col_zis1
sz.mmethod.rel_abun <- read.csv("sz.mmethod.rel_abun.csv", header = T, sep = ',',row.names=NULL)
sz.mmethod.sampledf <- read.csv("sz.mmethod.sampledf.csv", header = T, sep = ',',row.names=NULL)
sz.vare.cap_species_distances <- read.csv("sz.vare.cap_species_distances.csv", header = T, sep = ',',row.names=NULL)
sz.mmethod.rel_abun_f <- sz.mmethod.rel_abun[,-1]
rownames(sz.mmethod.rel_abun_f) <- sz.mmethod.rel_abun[,1]
#Run CAP analysis to identify predictor species
sz.vare.cap <- capscale(sz.mmethod.rel_abun_f ~ Method + Site, data=sz.mmethod.sampledf, dist="bray")
#Retain species scores
sppscores(sz.vare.cap) <- sz.mmethod.rel_abun_f
as.data.frame(vegan::scores(sz.vare.cap, display="species")) %>%
rownames_to_column(var = "sample") %>%
as.tibble %>%
mutate(dist = sqrt((CAP1 - 0)^2 + (CAP2 - 0)^2)) -> sz.vare.cap_species_distances
sz.species_distances <- as.data.frame(sz.vare.cap_species_distances)
rownames(sz.species_distances) <- sz.species_distances$sample
# Now add the environmental variables as arrows
sz.arrowmat <- sz.species_distances
#Rename row names to clean up plot
rownames(sz.species_distances) %>% as.data.frame() -> sz.namers
colnames(sz.namers) <- c("path")
sz.namers %>% separate(path, c("D1","P1","C1","O1","F1","G1","Species"), sep=";") %>% replace(is.na(.), "") %>%
mutate(., name = ifelse(Species == "", G1, Species)) %>%
mutate(., name = ifelse(name == "", F1, name)) %>%
mutate(., name = ifelse(name == "", O1, name)) %>%
mutate(., name = ifelse(name == "", C1, name)) %>%
mutate(., name = ifelse(name == "", P1, name))-> sz.namers
rownames(sz.arrowmat) <- sz.namers$name
View(sz.namers)
View(sz.mmethod.rel_abun_f)
View(sz.mmethod.sampledf)
View(sz.vare.cap_species_distances)
View(sz.arrowmat)
